// ===============================================================================================================
// Submit a maya job to the deadline system.
// Install this in the Deadline Repository.
//
// Copyright (c) Frantic Films
// All rights reserved.
// ===============================================================================================================

// ===============================================================================================================
// Adds frantic shelf and button to Maya UI if necessary.
// ===============================================================================================================

string $newButton = "Submit To Deadline";
string $newName = "FranticFilms";
string $fileName = ( `internalVar -userShelfDir` + "shelf_" + $newName + ".mel" );

int $addShelf = true;
if( `file -q -exists $fileName` )
	$addShelf = false;
else
{
	// Check for existing shelves in optionVars.
	string $shelfName;
	int $shelfCount = `optionVar -q numShelves`;
	for( $i = 1; $i <= $shelfCount; $i++ )
	{
		$varName = "shelfName" + $i;
		$shelfName = `optionVar -q $varName`;
		if( $shelfName == $newName )
		{
			$addShelf = false;
			break;
		}
	}
	
	// Add the shelf if necessary.
	if( $addShelf )
	{
		addNewShelfTab $newName;
		shelfButton -annotation $newButton -image1 "commandButton.xpm" -command ("SubmitJobToDeadline");
	}
}

// ===============================================================================================================
// Globals
// ===============================================================================================================

global string $MainTabLayout;

global string $ProjectPathGrp;
global string $ImageOutputPathGrp;
global string $MentalRayFilenameGrp;
global string $LimitGroupGrp;
global string $DependenciesGrp;

//--------------------------------------------------------
// Browsing functions that call Deadline command.
//--------------------------------------------------------

// Set the project directory in the text field.
global proc SetProjectDir()
{
	global string $ProjectPathGrp;
	string $newdir = SafeDeadlineCommand( "-getdirectory \"" + `textFieldButtonGrp -q -text $ProjectPathGrp` + "\"" );
	if( $newdir != "" )
		textFieldButtonGrp -e -text $newdir $ProjectPathGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the output image directory in the text field.
global proc SetImageDir()
{
	global string $ImageOutputPathGrp;
	string $newdir = SafeDeadlineCommand( "-getdirectory \"" + `textFieldButtonGrp -q -text $ImageOutputPathGrp` + "\"" );
	if( $newdir != "" )
		textFieldButtonGrp -e -text $newdir $ImageOutputPathGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the mental ray export filename in the text field.
global proc SetMentalRayFilename()
{
	global string $MentalRayFilenameGrp;
	string $newFilename = SafeDeadlineCommand( "-selectfilenamesave \"" + `textFieldButtonGrp -q -text $MentalRayFilenameGrp` + "\" \"Mental Ray Files (*.mi)|*.mi|All Files (*.*)|*.*\"" );
	if( $newFilename != "" )
		textFieldButtonGrp -e -text $newFilename $MentalRayFilenameGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the limit groups in the limit group field.
global proc SetLimitGroups()
{
	global string $LimitGroupGrp;
	string $newLimitGroups = SafeDeadlineCommand( "-selectlimitgroups \"" + `textFieldButtonGrp -q -text $LimitGroupGrp` + "\"" );
	print( "limit groups: " + $newLimitGroups + "\n" );
	if( $newLimitGroups != "Action was cancelled by user" )
		textFieldButtonGrp -e -text $newLimitGroups $LimitGroupGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the dependencies in the job dependency field.
global proc SetDependencies()
{
	global string $DependenciesGrp;
	string $newDependencies = SafeDeadlineCommand( "-selectdependencies \"" + `textFieldButtonGrp -q -text $DependenciesGrp` + "\"" );
	if( $newDependencies != "Action was cancelled by user" )
		textFieldButtonGrp -e -text $newDependencies $DependenciesGrp;
	
	SavePersistentDeadlineOptions();
}

//---------------------------------------------------------
// Maya Helper Functions
//---------------------------------------------------------

// Returns the current version of Maya.
global proc string MayaVersion()
{
	return `about -version`;
}

// Returns the current version of Maya as an integer.
global proc int IntMayaVersion()
{
	string $version = MayaVersion();
	return match( "[0-9]+", $version );
}

// Returns the current renderer.
global proc string GetCurrentRenderer()
{
	return currentRenderer();
}

// Returns the output prefix as is shown in the Render Globals, except that the frame
// number is replaced with '?' padding.
global proc string GetOutputPrefix()
{
	string $renderer = GetCurrentRenderer();
	if( $renderer != "vray" )
	{
		int $paddingFound = 0;
	
		// Get the first output prefix.
		string $prefixes[] = `renderSettings -fin`;
	
		// Go through each letter of the prefix and create a new prefix with each letter
		// separated by colons, ie: f:i:l:e:n:a:m:e:.:e:x:t:
		string $prefixWithColons = "";
		for( $i = 1; $i <= size( $prefixes[0] ); $i++ )
			$prefixWithColons += substring( $prefixes[0], $i, $i ) + ":";
	
		// Now split up the new prefix into an array, which removes all the colons and
		// places one letter in each index. Then count backwards and replace the first
		// group of numbers with the padding characters.
		string $prefix[] = stringToStringArray( $prefixWithColons, ":" );
		for( $i = size( $prefix ); $i > 0; $i-- )
		{
			if( match( "[0-9]", $prefix[$i] ) != "" )
			{
				$prefix[$i] = "?";
				$paddingFound = 1;
			}
			else if( $paddingFound )
				break;
		}
	
		// Finally, convert the prefix array back to a string and return it.
		return stringArrayToString( $prefix, "" );
	}
	else
	{
		// Need to special case vray, because they like to do things differently.
		global string $g_vrayImgExt[];
		
		string $ext = "";
		if (`optionMenuGrp -exists vrayImageFormatMenu`)
			$ext = `optionMenuGrp -q -v vrayImageFormatMenu`;
		else
			$ext = `getAttr vraySettings.imageFormatStr`;
		
		string $prefix = `getAttr vraySettings.fileNamePrefix`;
		if( $prefix == "" )
			$prefix = StripPathAndExt( `file -q -sceneName` );
		
		// Seems to be a bug where no matter what, VRay will use 4 digits for padding.
		// If ever fixed, try using the value from the vray settings.
		//int $padding = `getAttr vraySettings.fileNamePadding`;
		int $padding = 4;
		
		string $paddingStr = "";
		for( $i = 0; $i < $padding; $i ++ )
			$paddingStr = $paddingStr + "?";
		
		// When rendering, vray places a period before the padding, even though it
		// doesn't show up in the render globals filename.
		return $prefix + "." + $paddingStr + "." + $ext;
	}
}

// Creates a tile prefix from the given prefix by placing the tile part at the
// beginning of the filename. It's placed at the beginning to try and avoid as
// many conflicts as possible with Maya's prefix shortcuts.
global proc string GetTileOutputPrefix( string $outputPrefix, int $x, int $y, int $xCount, int $yCount )
{
	string $path = dirname( $outputPrefix );
	if( $path != "" )
		$path = $path + "/";
	
	string $base = basename( $outputPrefix, "" );
	string $tile = "_tile_" + $x + "x" + $y + "_" + $xCount + "x" + $yCount + "_";
	return $path + $tile + $base;
}

global proc string GetMayaOutputPrefix()
{
	string $prefix = "";
	
	string $renderer = GetCurrentRenderer();
	if( $renderer != "vray" )
		$prefix = `getAttr defaultRenderGlobals.imageFilePrefix`;
	else
		$prefix = `getAttr vraySettings.fileNamePrefix`;
	
	if( $prefix == "" )
		$prefix = StripPathAndExt( `file -q -sceneName` );
	
	return $prefix;
}

// Gets the image directory for Maya.
global proc string GetImageDirectory()
{
	// Relative path, get the project's image directory.
	string $fileRules[] = `workspace -q -renderType`;
	string $imageDir = "";
	for( $i = 0; $i < size( $fileRules ); $i += 2 )
	{
		if( $fileRules[$i] == "images" )
		{
			$imageDir = $fileRules[$i+1];
			break;
		}
	}

	string $path;
	$path = `workspace -q -fullName`;
	if( substring( $path, size( $path ), size( $path ) ) != "\\" && substring( $path, size( $path ), size( $path ) ) != "/" )
		$path = $path + "/";

	if( $imageDir == "" )
		return $path;

	if( substring( $imageDir, size( $imageDir ), size( $imageDir ) ) != "\\" && substring( $imageDir, size( $imageDir ), size( $imageDir ) ) != "/" )
		$imageDir = $imageDir + "/";
	
	// Check for an absolute path in the image directory.
	if( substring( $imageDir, 1, 1 ) == "/" || substring( $imageDir, 1, 1 ) == "\\" || substring( $imageDir, 2, 2 ) == ":" )
		$path = $imageDir;
	else
		$path = $path + $imageDir;
		
	return $path;
}


// Returns frame range and by step count.
global proc int[] GetFrameRange()
{
	int	$range[3] = { 0, 0, 1 };
	
	string $renderer = GetCurrentRenderer();	
	if( $renderer != "vray" )
	{
		$range[0] = `getAttr defaultRenderGlobals.startFrame`;
		$range[1] = `getAttr defaultRenderGlobals.endFrame`;
		$range[2] = `getAttr defaultRenderGlobals.byFrameStep`;
	}
	else
	{
		$range[0] = `getAttr vraySettings.startFrame`;
		$range[1] = `getAttr vraySettings.endFrame`;
		$range[2] = `getAttr vraySettings.frameStep`;
	}
		
	return $range;
}

// Returns global resolution.
global proc int[] GetGlobalsResolution()
{
	int	$res[2] = { 320, 240 };
	
	string $renderer = GetCurrentRenderer();
	if( $renderer != "vray" )
	{
		string $globals[] = `ls -renderGlobals`;
		if( size( $globals[0] ) > 0 )
		{
			string $connect[] = `listConnections ($globals[0] + ".resolution")`;
			if( size( $connect[0] ) > 0 )
			{
				$res[0] = `getAttr ( $connect[0] + ".width" )`;
				$res[1] = `getAttr ( $connect[0] + ".height" )`;
			}
		}
	}
	else
	{
		$res[0] = `getAttr vraySettings.width`;
		$res[1] = `getAttr vraySettings.height`;
	}
	
	return $res;
}

// Returns if animation is enabled.
global proc int IsAnimatedOn()
{
	string $renderer = GetCurrentRenderer();
	
	int $anim = false;
	if( $renderer == "vray" )
		$anim = `getAttr vraySettings.animation`;
	else
		$anim = `getAttr defaultRenderGlobals.animation`;
	
	return $anim;
}

// Returns if motion blur is enabled.
global proc int GetMotionBlur()
{
	string $renderer = GetCurrentRenderer();
	
	int $mb = false;
	if( $renderer == "mentalRay" )
		$mb = `getAttr miDefaultOptions.motionBlur`;
	else if( $renderer == "mayaHardware" )
		$mb = `getAttr hardwareRenderGlobals.enableMotionBlur`;
	else if( $renderer == "mayaVector" )
		$mb = false;
	else if( $renderer == "turtle" )
		$mb = `getAttr TurtleRenderOptions.motionBlur`;
	else if( $renderer == "renderMan" )
		$mb = `getAttr renderManGlobals.rman__torattr___motionBlur`;
	else if( $renderer == "finalRender" )
		$mb = `getAttr defaultFinalRenderSettings.motionBlur`;
	else if( $renderer == "vray" )
		$mb = `getAttr vraySettings.cam_mbOn`;
	else
		$mb = `getAttr defaultRenderGlobals.motionBlur`;
	
	return $mb;
}

// Returns if render layers is on.
global proc int IsRenderLayersOn()
{
	int $layers = false;
	
	int $goodRLCounter = 0;
	string $renderLayers[] = `ls -exactType "renderLayer"`;
	for( $item in $renderLayers )
	{
		if( `gmatch $item "defaultRenderLayer"` == 1 )
			$goodRLCounter++; // This is THE defaultRenderLayer, so count it.
		else if( `gmatch $item "*defaultRenderLayer*"` != 1 )
			$goodRLCounter++; // This is a user render layer, count it.
	}

	if( $goodRLCounter > 1 )
		$layers = true;

	return $layers;
}

// Returns if the renderer supports region rendering.
global proc int SupportsRegionRendering( string $renderer )
{
	if( $renderer == "mayaSoftware" ||  $renderer == "mentalRay" ||  $renderer == "renderMan" || $renderer == "finalRender" || $renderer == "turtle" || $renderer == "vray" )
		return true;
	return false;
}

// Returns if the renderer supports the CPU option.
global proc int EnableCpuOption( string $renderer )
{
	if( IsRenderLayersOn() )
		return true;
	else
	{
		if( $renderer == "mayaSoftware" || $renderer == "mentalRay" || $renderer == "finalRender" || $renderer == "gelato" )
			return true;
	}
	
	return false;
}

// Returns if the renderer supports half frame rendering.
global proc int ShowHalfFramesOption( string $renderer )
{
	if( !IsRenderLayersOn() )
	{
		if( $renderer == "renderman" || $renderer == "vray" )
			return false;
	}
	
	return false;
}

// Opens the mental ray export settings dialog.
global proc OpenExportSettings()
{
	fileOptions "ExportAll" "projectViewer ExportAll";
}

// Launches the Maya online help
global proc OnlineHelp()
{
	SafeDeadlineCommand( "-startprocess http://software.franticfilms.com/index.aspx?page=deadline/maya" );
}

//--------------------------------------------------------
// Utility Functions
// --------------------------------------------------------

// Returns the filename with the path and extension stripped off.
global proc string StripPathAndExt( string $fullFileName )
{
	string $fileNameNoPath = match( "[^/\\]*$", $fullFileName );
	string $fileNameOnly = match( "[^\.]*", $fileNameNoPath );
	
	return $fileNameOnly;
}

// Ensures that all slashes are consistant throughout the filename.
global proc string CheckSlashes( string $filename )
{
	//string $result = substituteAllString( $filename, "\\", "/" ); // switch from '\' to '/'
	//$result = substituteAllString( $result, "//", "/" ); // replace double '/' where paths may have been combined
	//if( startsWith( $result, "/" ) )
	//	$result = "/" + $result;
	//return $result;
	
	string $result = $filename;
	string $newResult;
	$newResult = `substitute "\\\\" $result "/"`;
	while( $newResult != $result )
	{
		$result = $newResult;
		$newResult = `substitute "\\\\" $result "/"`;
	}
	
	$result = $newResult;
	$newResult = `substitute "//" $result "/"`;
	while( $newResult != $result )
	{
		$result = $newResult;
		$newResult = `substitute "//" $result "/"`;
	}
	
	if( startsWith( $newResult, "/" ) )
		$newResult = "/" + $newResult;
	
	return $newResult;
}

// Returns true if the path is on the c:, d:, or e:.
global proc int IsLocalDrive( string $path )
{
	if( size( $path ) > 0 )
	{
		if( ( substring( $path, 1, 1) == "C" || substring( $path, 1, 1) == "c" ) ||
			( substring( $path, 1, 1) == "D" || substring( $path, 1, 1) == "d" ) ||
			( substring( $path, 1, 1) == "E" || substring( $path, 1, 1) == "e" ) )
		{
			return true;
		}
	}

	return false;
}

// Calls deadlinecommand and returns the output from the command.
global proc string SafeDeadlineCommand( string $command )
{
	print( "running deadline command: " + $command + "\n" );
	string $result = system("deadlinecommand " + $command );
	$result = substituteAllString( $result, "\r", "" );
	
	string $resultArray[];
	$resultArray = stringToStringArray( $result, "\n" );
	if( size($resultArray) > 2 && startsWith( $resultArray[2], "UNC paths are not supported." ) )
	{
		int $tempResultArraySize = size($resultArray) - 3;
		string $tempResultArray[];
		for( $i = 0; $i < $tempResultArraySize; $i++ )
			$tempResultArray[$i] = $resultArray[$i+3];
		$result = stringArrayToString( $tempResultArray, "\n" );
	}
	
	if( endsWith( $result, "\n" ) )
		$result = substring( $result, 1, size( $result ) - 1 );
	
	return $result;
}

//---------------------------------------------------------
// Functions for saving submission dialog options.
//---------------------------------------------------------

// Adds a string attribute.
global proc AddStringAttribute( string $attrName )
{
	if( ! `attributeExists $attrName defaultRenderGlobals` )
	addAttr -shortName $attrName -longName $attrName -dt "string" defaultRenderGlobals;
}

// Adds a long attribute.
global proc AddLongAttribute( string $attrName )
{
	if( ! `attributeExists $attrName defaultRenderGlobals` )
	addAttr -shortName $attrName -longName $attrName -at long defaultRenderGlobals;
}

// Saves the persistent deadline options in the scene.
global proc SavePersistentDeadlineOptions()
{
	global string $ProjectPathGrp;
	global string $ImageOutputPathGrp;
	global string $MentalRayFilenameGrp;
	global string $LimitGroupGrp;
	global string $DependenciesGrp;
	
	string $renderer = GetCurrentRenderer();
	int $renderLayersEnabled = IsRenderLayersOn();

	AddStringAttribute( "deadlineJobName" );
	setAttr defaultRenderGlobals.deadlineJobName -type "string" `textFieldGrp -q -text frw_JobName`;
	
	AddStringAttribute( "deadlineJobComment" );
	setAttr defaultRenderGlobals.deadlineJobComment -type "string" `textFieldGrp -q -text frw_JobComment`;
	
	AddStringAttribute( "deadlineDepartment" );
	setAttr defaultRenderGlobals.deadlineDepartment -type "string" `textFieldGrp -q -text frw_Department`;

	AddStringAttribute( "deadlineGroup" );
	setAttr defaultRenderGlobals.deadlineGroup -type "string" `optionMenuGrp -q -value frw_Group`;
	
	AddStringAttribute( "deadlineJobPool" );
	setAttr defaultRenderGlobals.deadlineJobPool -type "string" `optionMenuGrp -q -value frw_deadlinePool`;
	
	//AddLongAttribute( "deadlineUseOnlyPool" );
	//setAttr defaultRenderGlobals.deadlineUseOnlyPool `checkBox -q -v frw_poolMachinesOnly`;
	
	AddLongAttribute( "deadlineJobPriority" );
	setAttr defaultRenderGlobals.deadlineJobPriority `intSliderGrp -q -v frw_JobPriority`;
	
	AddLongAttribute( "deadlineLimitCount" );
	setAttr defaultRenderGlobals.deadlineLimitCount `intSliderGrp -q -v frw_LimitCount`;
	
	AddLongAttribute( "deadlineSlaveTimeout" );
	setAttr defaultRenderGlobals.deadlineSlaveTimeout `intSliderGrp -q -v frw_SlaveTimeout`;
	
	AddStringAttribute( "deadlineLimitGroups" );
	setAttr defaultRenderGlobals.deadlineLimitGroups -type "string" `textFieldGrp -q -text frw_limitGroups`;
	
	AddLongAttribute( "deadlineSubmitAsSuspended" );
	setAttr defaultRenderGlobals.deadlineSubmitAsSuspended `checkBox -q -v frw_submitAsSuspended`;
	
	//AddLongAttribute( "deadlineDeleteOnComplete" );
	//setAttr defaultRenderGlobals.deadlineDeleteOnComplete `checkBox -q -v frw_deleteOnComplete`;
	
	AddLongAttribute( "deadlineChunkSize" );
	setAttr defaultRenderGlobals.deadlineChunkSize `intSliderGrp -q -v frw_FrameGroup`;
	
	//AddStringAttribute( "deadlineOutputFilePath" );
	//setAttr defaultRenderGlobals.deadlineOutputFilePath -type "string" `textFieldButtonGrp -q -fiame $ImageOutputPathGrp`;
	
	AddLongAttribute( "deadlineSubmitMayaScene" );
	setAttr defaultRenderGlobals.deadlineSubmitMayaScene `checkBox -q -v frw_submitMayaScene`;
	
	//AddStringAttribute( "deadlineProjectPathOverride" );
	//setAttr defaultRenderGlobals.deadlineProjectPathOverride -type "string" `textFieldButtonGrp -q -fileName $ProjectPathGrp`;
	
	AddLongAttribute( "deadlineNumCPUs" );
	if( EnableCpuOption( $renderer ) )
		setAttr defaultRenderGlobals.deadlineNumCPUs `intSliderGrp -q -v frw_MaxCPUs`;
	
	AddLongAttribute( "deadlineSubmitEachRenderLayer" );
	if( $renderLayersEnabled )
		setAttr defaultRenderGlobals.deadlineSubmitEachRenderLayer `checkBox -q -v frw_submitEachRenderLayer`;
	
	AddLongAttribute( "deadlineOverrideGlobalRange" );
	if( $renderLayersEnabled )
		setAttr defaultRenderGlobals.deadlineOverrideGlobalRange `checkBox -q -v frw_overrideGlobalRange`;
	
	AddLongAttribute( "deadlineUseMayaBatchPlugin" );
	setAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin `checkBox -q -v frw_useMayaBatchPlugin`;
	
	AddLongAttribute( "deadlineTilesInX" );
	setAttr defaultRenderGlobals.deadlineTilesInX `intSliderGrp -q -v frw_tilesInX`;
	
	AddLongAttribute( "deadlineTilesInY" );
	setAttr defaultRenderGlobals.deadlineTilesInY `intSliderGrp -q -v frw_tilesInY`;
	
	AddStringAttribute( "deadlineMentalRayFilename" );
	setAttr defaultRenderGlobals.deadlineMentalRayFilename -type "string" `textFieldButtonGrp -q -fileName $MentalRayFilenameGrp`;
	
	// Enable or disable some options based on current values.
	int $regionRendering = `checkBox -q -v frw_regionRendering`;
	if( $renderLayersEnabled )
	{
		int $submitEachRenderLayer = `checkBox -q -v frw_submitEachRenderLayer`;
		checkBox -edit -enable $submitEachRenderLayer frw_regionRendering;
		checkBox -edit -enable $submitEachRenderLayer frw_overrideGlobalRange;
		
		if( !$submitEachRenderLayer && $regionRendering )
		{
		   $regionRendering = false;
		   checkBox -edit -v $regionRendering frw_regionRendering;
		}
	}
	
	intSliderGrp -edit -enable $regionRendering frw_tilesInX;
	intSliderGrp -edit -enable $regionRendering frw_tilesInY;
}

//---------------------------------------------------------
// Functions for job submission.
//---------------------------------------------------------

// Creates the submission files and submits the job to Deadline.
proc string WriteJobFilesAndSubmit( string $renderer, int $showDialog, int $regionRendering, int $mentalRayExport )
{
	// Get the deadline temp directory.
	string $tempDir = SafeDeadlineCommand( "-gethomedirectory" ) + "/temp";
	
	// Get the output file path and prefix.
	string $outputFilePath = CheckSlashes( `textFieldGrp -q -fileName frw_outputFilePath` );
	string $outputFilePrefix = CheckSlashes( GetOutputPrefix() );
	string $mentalRayFilename = CheckSlashes( `textFieldGrp -q -fileName frw_mentalRayFilePath` );
	
	// Get some initial settings.
	string $jobName = `textFieldGrp -q -text frw_JobName`;
	string $frameList = `textFieldGrp -q -fileName frw_FrameList`;
	
	// Append the render layer name to the job name if the submit each render layer check is on.
	string $currentRenderLayer = "";
	int $submitEachRenderLayer = false;
	if( IsRenderLayersOn() )
	{
		$submitEachRenderLayer = `checkBox -q -value frw_submitEachRenderLayer`;    
		if( !$mentalRayExport && $submitEachRenderLayer )
		{
			$currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
			$jobName += " - " + $currentRenderLayer;
		
			// Renderman doesn't output the default render layer to it's own directory
			//if ( !( $renderer == "renderMan" && $currentRenderLayer == "defaultRenderLayer") )
			//	$outputFilePath = $outputFilePath + "/" + $currentRenderLayer;
			
			// Check if we should override the globals or not.
			if( !`checkBox -q -v frw_overrideGlobalRange` )
			{
				int $range[] = GetFrameRange();
				$frameList = $range[0] + "-" + $range[1] + "x" + $range[2];
			}
		}
	}
	
	// Get region rendering settings.
	int $regionLeft = 0;
	int $regionTop = 0; 
	int $regionRight = 0; 
	int $regionBottom = 0;
	int $currX = 0;
	int $currY = 0;
	int $currTile = 0;
	
	int $tilesInX = `intSliderGrp -q -v frw_tilesInX`;
	int $tilesInY = `intSliderGrp -q -v frw_tilesInY`; 
	
	// Append tile information to job name if doing a region render.
	if( !$mentalRayExport && $regionRendering )
	{
		if( `attributeExists deadlineRegionLeft defaultRenderGlobals` ) $regionLeft = `getAttr defaultRenderGlobals.deadlineRegionLeft`;
		if( `attributeExists deadlineRegionTop defaultRenderGlobals` ) $regionTop = `getAttr defaultRenderGlobals.deadlineRegionTop`;
		if( `attributeExists deadlineRegionRight defaultRenderGlobals` ) $regionRight = `getAttr defaultRenderGlobals.deadlineRegionRight`;
		if( `attributeExists deadlineRegionBottom defaultRenderGlobals` ) $regionBottom = `getAttr defaultRenderGlobals.deadlineRegionBottom`;
		if( `attributeExists deadlineCurrX defaultRenderGlobals` ) $currX = `getAttr defaultRenderGlobals.deadlineCurrX`;
		if( `attributeExists deadlineCurrY defaultRenderGlobals` ) $currY = `getAttr defaultRenderGlobals.deadlineCurrY`;
		if( `attributeExists deadlineCurrTile defaultRenderGlobals` ) $currTile = `getAttr defaultRenderGlobals.deadlineCurrTile`;
		
		$jobName += " (Tile " + $currTile + " : " + $currX + "x" + $currY + " of " + $tilesInX + "x" + $tilesInY + ")";
		$outputFilePrefix = GetTileOutputPrefix( $outputFilePrefix, $currX, $currY, $tilesInX, $tilesInY );
	}
	
	
	// Create the job info file.
	string $submitFilename = CheckSlashes( $tempDir + "/maya_deadline_info.job" );
	$fileId = `fopen $submitFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );
	
	if( `checkBox -q -v frw_useMayaBatchPlugin` )
		fprint $fileId ( "Plugin=MayaBatch\n" );
	else
		fprint $fileId ( "Plugin=MayaCmd\n" );
	
	fprint $fileId ( "Name=" + $jobName + "\n" );
	fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
	fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
	//fprint $fileId ( "PoolMachinesOnly=" + `checkBox -q -value frw_poolMachinesOnly` + "\n" );
	fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
	fprint $fileId ( "Priority=" + `textFieldGrp -q -fileName frw_JobPriority` + "\n" );
	fprint $fileId ( "Frames=" + $frameList + "\n" );
	fprint $fileId ( "ChunkSize=" + `intSliderGrp -q -v frw_FrameGroup` + "\n" );
	//fprint $fileId ( "DeleteOnComplete=" + `checkBox -q -value frw_deleteOnComplete` + "\n" );
	fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
	fprint $fileId ( "TaskTimeoutMinutes=" + `intSliderGrp -q -v frw_SlaveTimeout` + "\n" );
	fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
	fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
	fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
	fprint $fileId ( "JobDependencies=" + `textFieldGrp -q -text frw_dependencies` + "\n" );
	
	if( `checkBox -q -value frw_submitAsSuspended` )
		fprint $fileId ( "InitialStatus=Suspended\n" );
	
	if( !$mentalRayExport )
	{
		if( IsRenderLayersOn() && !$submitEachRenderLayer )
			fprint $fileId ( "OutputDirectory0=" + $outputFilePath + "\n" );
		else
			fprint $fileId ( "OutputFilename0=" + CheckSlashes( $outputFilePath + "/" + $outputFilePrefix ) + "\n" );
	}
	else
		fprint $fileId ( "OutputDirectory0=" + dirname( $mentalRayFilename ) + "\n" );
		   
	fclose $fileId;
	
	
	// Create the plugin info file.
	string $jobFilename = CheckSlashes( $tempDir + "/maya_deadline_job.job" );
	$fileId = `fopen $jobFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );
	
	if( $mentalRayExport )
	{
		fprint $fileId ( "Renderer=mentalRayExport\n" );
		fprint $fileId ( "UsingRenderLayers=false\n" );
		
		global string $gExportFilterCheckBoxes[];
		global string $gExportPathesCheckBoxes[];
		
		fprint $fileId ( "MentalRayExportfile=" + $mentalRayFilename + "\n" );
		fprint $fileId ( "MentalRayExportBinary=" + ((`radioButton -query -select MayatomrExport_Binary`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportTabStop=" + ($tabstop = `intField -query -value MayatomrExport_TabSize`) + "\n" );
		
		int $perframe = 0;
		int $padframe = 0;
		if(`checkBoxGrp -query -value1 MayatomrExport_FilePerFrame`)
		{
			$perframe = `optionMenuGrp -q -select MayatomrExport_FrameExtension`;
			$padframe = `intFieldGrp -q -value1 MayatomrExport_FramePadding`;
			if ($padframe > 9)
				$padframe = 9;
		}
		
		fprint $fileId ( "MentalRayExportPerFrame=" + $perframe + "\n" );
		fprint $fileId ( "MentalRayExportPadFrame=" + $padframe + "\n" );
		
		$pathnames = "";
		if(`checkBoxGrp -query -value1 MayatomrExport_Pathes`)
		{
			for( $cnt=0; $cnt < size( $gExportPathesCheckBoxes ); $cnt++ )
				$pathnames += `optionMenuGrp -query -sl $gExportPathesCheckBoxes[$cnt]`;
		}
		else
			$pathnames = "n";
		
		fprint $fileId ( "MentalRayExportPathNames=" + $pathnames + "\n" );
		
		$fragment = (`optionMenuGrp -q -select MayatomrExport_Fragment`-1);
		fprint $fileId ( "MentalRayExportFragment=" + $fragment + "\n" );
		fprint $fileId ( "MentalRayExportFragmentMaterials=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentMaterials`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportFragmentShaders=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentIncomingShdrs`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportFragmentChildDag=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentChildDag`) ? 1 : 0) + "\n" );
		
		$filter = "";
		if(`checkBoxGrp -query -value1 MayatomrExport_Filters`)
		{
			for($cnt=0; $cnt<size($gExportFilterCheckBoxes); $cnt++)
				$filter += (`checkBoxGrp -query -value1 $gExportFilterCheckBoxes[$cnt]`) ? "0" : "1";
		}
		
		fprint $fileId ( "MentalRayExportFilterString=" + $filter + "\n" );
	}
	else
	{
		fprint $fileId ( "Renderer=" + $renderer + "\n" );
		fprint $fileId ( "ProjectPath=" + CheckSlashes( `textFieldGrp -q -fileName frw_projectPath` ) + "\n" );
		fprint $fileId ( "UsingRenderLayers=" + IsRenderLayersOn() + "\n" );
		fprint $fileId ( "RenderLayer=" + $currentRenderLayer + "\n" );
		
		int $renderHalfFrames = ShowHalfFramesOption( $renderer ) ? `checkBox -q -value frw_renderHalfFrames` : 0;
		fprint $fileId ( "RenderHalfFrames=" + $renderHalfFrames + "\n" );
		
		if( $regionRendering )
		{
			fprint $fileId ( "RegionRendering=True\n" );
			fprint $fileId ( "RegionLeft=" + $regionLeft + "\n" );
			fprint $fileId ( "RegionTop=" + $regionTop + "\n" );
			fprint $fileId ( "RegionRight=" + $regionRight + "\n" );
			fprint $fileId ( "RegionBottom=" + $regionBottom + "\n" );
		}
		
		if( EnableCpuOption( $renderer ) )
			fprint $fileId ( "MaxProcessors=" + `intSliderGrp -q -v frw_MaxCPUs` + "\n" );
		
		if( $renderer == "mayaSoftware" )
		{
			// render globals qualification
			string $rendQual[] = `listConnections defaultRenderGlobals.qual`;
			
			// get antialising quality level and turn it into a string
			string $strAntialiasing = "highest";
			int $intAntialiasing = `getAttr ($rendQual[0] + ".edgeAntiAliasing")`;
			if ( $intAntialiasing == 1 ) $strAntialiasing = "high";
			if ( $intAntialiasing == 2 ) $strAntialiasing = "medium";
			if ( $intAntialiasing == 3 ) $strAntialiasing = "low";
			
			fprint $fileId ( "AntiAliasing=" + $strAntialiasing + "\n" );
		}
		
		if( $renderer == "mentalRay" )
			fprint $fileId ( "MentalRayVerbose=Progress Messages\n" );
	}
	
	fprint $fileId ( "Version=" + MayaVersion() + "\n" );
	
	string $mayaBuild = ( IntMayaVersion() > 7 ) ? `optionMenuGrp -q -value frw_mayaBuild` : "None";
	fprint $fileId ( "Build=" + $mayaBuild + "\n" );
	
	int $res[] = GetGlobalsResolution();
	fprint $fileId ( "ImageWidth=" + $res[0] + "\n" );
	fprint $fileId ( "ImageHeight=" + $res[1] + "\n" );
	fprint $fileId ( "AspectRatio=" + `getAttr "defaultResolution.deviceAspectRatio"` + "\n" );
	
	fprint $fileId ( "OutputFilePath=" + $outputFilePath + "\n" );
	if( IsRenderLayersOn() && !$submitEachRenderLayer )
		fprint $fileId ( "OutputFilePrefix=\n" );
	else
	{
		string $mayaOutputFilePrefix = GetMayaOutputPrefix();
		if( !$mentalRayExport && $regionRendering )
			$mayaOutputFilePrefix = GetTileOutputPrefix( $mayaOutputFilePrefix, $currX, $currY, $tilesInX, $tilesInY );
		fprint $fileId ( "OutputFilePrefix=" + $mayaOutputFilePrefix + "\n" );	
	}
	
	fprint $fileId ( "MotionBlur=" + GetMotionBlur() + "\n" );
	
	// Get cameras
	string $cameraList[] = `ls -cameras`;
	int $camNumber = `size $cameraList`;
	
	// If the user has specified a camera, make it the default
	string $camera = "";
	string $selectedCamera = `optionMenuGrp -q -value frw_camera`;
	for( $n = 1 ; $n <= $camNumber; $n++ )
	{
		if( $cameraList[ $n - 1 ] == $selectedCamera )
		{
			$camera = $selectedCamera;
			break;
		}
	}
	fprint $fileId ( "Camera=" + $camera + "\n" );
	
	// Now list all the camera options
	fprint $fileId ("Camera0=\n");
	for( $n = 1 ; $n <= $camNumber; $n++ )
		fprint $fileId ( "Camera" + $n + "=" + $cameraList[ $n - 1 ] + "\n" );
	
	string $sceneFilePath = CheckSlashes( `file -q -sceneName` );
	int $submitMayaSceneFile = `checkBox -q -value frw_submitMayaScene`;
	if( !$submitMayaSceneFile )
		fprint $fileId ( "SceneFile=" + $sceneFilePath + "\n" );
	
	fclose $fileId;
	
	
	// Submit the job to Deadline
	string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
	if( $submitMayaSceneFile )
		$submissionCommand += " \"" + $sceneFilePath + "\"";
	string $submitResults = SafeDeadlineCommand( $submissionCommand );
	
	// Get the job id to return
	string $jobId = "";
	string $jobIdRegEx = "[a-z,A-Z,0-9]+_[0-9]+_[a-z,A-Z,0-9]+_[0-9,a-f,A-F]+";
	$matches = `match $jobIdRegEx $submitResults`;
	if( size( $matches ) > 0 )
		$jobId = $matches;
	
	// Specify which renderer is being used.
	if( !$mentalRayExport )
		$submitResults = $submitResults + "\n\nUsing renderer: " + $renderer + "\n";
	else
		$submitResults = $submitResults + "\n\nUsing renderer: mentalRayExport\n";
	
	// Show results
	if( $showDialog )
		confirmDialog -title "Submission Results" -message $submitResults -button "Ok";
	else
		print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );
	
	return $jobId;
}

// Sets some region rendering settings before submitting the job to Deadline.
proc int SetupRegionRenderingJob( string $renderer )
{
	int $submitCounter = 0;
	
	AddLongAttribute( "deadlineRegionLeft" );
	AddLongAttribute( "deadlineRegionTop" );
	AddLongAttribute( "deadlineRegionRight" );
	AddLongAttribute( "deadlineRegionBottom" );
	AddLongAttribute( "deadlineCurrX" );
	AddLongAttribute( "deadlineCurrY" );
	AddLongAttribute( "deadlineCurrTile" );
	
	int $res[] = GetGlobalsResolution();
	int $width = $res[0];
	int $height = $res[1];;
	if( $renderer == "vray" )
		$height = $height - 1; // vray is very picky about the height. Not width for some reason.
	
	int $tilesInX = `intSliderGrp -q -v frw_tilesInX`;
	int $tilesInY = `intSliderGrp -q -v frw_tilesInY`; 
	
	int $deltaX = floor (1.0 * $width / $tilesInX );
	int $deltaY = floor (1.0 * $height / $tilesInY );
	
	int $totalTiles = $tilesInX * $tilesInY;
	int $currTile = 0;
	
	for( $y = 1; $y <= $tilesInY; $y++ )
	{
		for( $x = 1; $x <= $tilesInX; $x++ )
		{
			$currTile++;
			
			int $newY = $y;
			if( $renderer != "renderMan" && $renderer != "vray" )
				$newY = $tilesInY - $y + 1;
			
			setAttr defaultRenderGlobals.deadlineRegionLeft ($deltaX * ( $x - 1 ));
			setAttr defaultRenderGlobals.deadlineRegionTop ($deltaY * ( $newY - 1 ));
			
			int $tempRight;
			if( $x == $tilesInX )
				$tempRight = $width - 1;
			else
				$tempRight = ($deltaX * $x) - 1;
			
			if( $renderer == "mentalRay" )
				$tempRight++;
			
			setAttr defaultRenderGlobals.deadlineRegionRight $tempRight;
			
			int $tempBottom;
			if( $newY == $tilesInY )
				$tempBottom = $height - 1;
			else
				$tempBottom = ($deltaY * $newY) - 1;
			
			if( $renderer == "mentalRay" )
				$tempBottom++;
			
			setAttr defaultRenderGlobals.deadlineRegionBottom $tempBottom;
			
			setAttr defaultRenderGlobals.deadlineCurrX $x;
			setAttr defaultRenderGlobals.deadlineCurrY $y;
			setAttr defaultRenderGlobals.deadlineCurrTile $currTile;
			
			WriteJobFilesAndSubmit( $renderer, 0, 1, 0 );
			$submitCounter++;
		}
	}
	
	return $submitCounter;
}

//---------------------------------------------------------
// Event handler functions.
//---------------------------------------------------------

// Event when Submit Job button is pressed
global proc DeadlineSubmitterOnOk()
{
	SavePersistentDeadlineOptions();
	print( "Submitting job to Deadline...\n" );
		
	// Get the current renderer
	string $renderer = GetCurrentRenderer();
	
	// Check if we are doing a mental ray export
	global string $MainTabLayout;
	int $mentalRayExport = ( `tabLayout -q -selectTabIndex $MainTabLayout` == 2 );
	
	/*
	// Check that if the renderer is Gelato that we are using MayaBatch
	if( $renderer == "gelato" && `getAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin` != 1)
	{
		string $errorMessage = "The Maya plugin does not support the Gelato renderer.  Please select the checkbox to use the MayaBatch plugin.\n\n";
		string $result = `confirmDialog -title "Submission Error" -message ( $errorMessage ) -button "OK" -defaultButton "OK"`;
		return;
	}
	*/
	
	// Ensure that the scene is animated
	if( !IsAnimatedOn() )
	{
		string $errorMessage = "";
		if ( $renderer == "vray" )
			$errorMessage = "Animation checkbox under Image File Output is not checked. Deadline requires that animation be enabled.\n\n";
		else
			$errorMessage = "Frame/Animation Ext in render globals is set for a single frame. Deadline requires that animation be enabled.\n\n";
		
		string $result = `confirmDialog -title "Submission Error" -message ( $errorMessage ) -button "OK" -defaultButton "OK"`;
		return;
	}

	// Check all the paths for problems, and warn the user if any are found
	string $projectPath = CheckSlashes( `textFieldGrp -q -fileName frw_projectPath` );
	string $outputFilePath = CheckSlashes( `textFieldGrp -q -fileName frw_outputFilePath` );
	string $sceneFilePath = CheckSlashes( `file -q -sceneName` );
	string $mentalRayFilename = CheckSlashes( `textFieldGrp -q -fileName frw_mentalRayFilePath` );
	
	int $submitMayaSceneFile = `checkBox -q -value frw_submitMayaScene`;

	string $message = "";
	if( !$submitMayaSceneFile && IsLocalDrive( $sceneFilePath ) )
		$message = $message + "Maya Scene file, \"" + $sceneFilePath + "\" is on a local drive and is not being submitted.\nSlaves will not be able to access the scene file.\n\n";

	if( $mentalRayExport )
	{
		$binary = false;
		if( catch( $binary = `radioButton -query -select MayatomrExport_Binary` ) )
		{
			string $result = `confirmDialog -title "Error Reading Export Options" -message "Could not read in Mental Ray Export settings. Please ensure that the Mental Ray Export settings dialog is open when submitting the job to Deadline." -button "Export Settings..." -button "Cancel" -defaultButton "Export Settings..." -cancelButton "Cancel" `;
			if( $result == "Export Settings..." )
				OpenExportSettings();
			return;
		}
		
		$mentalRayPath = dirname( $mentalRayFilename );
		if( ! `filetest -d $mentalRayPath` )
			$message = $message + "Mental Ray output path \"" + $mentalRayPath + "\" does not exist!  Your Mental Ray files will be lost!\n\n";
		else if( IsLocalDrive( $mentalRayFilename ) )
			$message = $message + "Mental Ray output file \"" + $mentalRayFilename + "\" is on a local drive.\nSlaves will not be able to copy the Mental Ray files to this drive.\n\n";
		else if( size( $mentalRayFilename ) == 0 )
			$message = $message + "Mental Ray output file is blank! Your Mental Ray files will be lost!\n\n";
	}
	else
	{
		if( IsLocalDrive( $projectPath ) )
			$message = $message + "Project path, \"" + $projectPath + "\" is on a local drive.\nParticle caching and some Maya features will not be available.\n\n";
		
		if( ! `filetest -d $outputFilePath` )
			$message = $message + "Image Output Path \"" + $outputFilePath + "\" does not exist! Your final images will be lost!\n\n";
		else if( IsLocalDrive( $outputFilePath ) )
			$message = $message + "Image Output Path, \"" + $outputFilePath + "\" is on a local drive.\nSlaves will not be able to copy images to this drive.\n\n";
		else if( size( $outputFilePath ) == 0 )
			$message = $message + "Image Output Path is blank! Your final images will be lost!\n\n";
		
		// Check for motion blur and warn user if it is off, but only if Render Layers are not enabled
		if( $renderer != "mayaVector" )
		{
			if( !IsRenderLayersOn() && !GetMotionBlur() )
				$message = $message + "Motion Blur is not enabled.\n\n";
		}
	}
		
	// Display any warning messages
	if( size( $message ) > 0 )
	{
		$message = $message + "\nAre you sure you want to submit this job?";
		string $result = `confirmDialog -title "Confirm" -message ( $message ) -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;
		if( $result == "No" )
			return;
	}
	
	// Save scene, if necessary
	if( `file -q -modified` )
	{
		print( "Maya scene has been modified, saving file\n" );
		file -save;
	}
	else
		print( "Maya scene has not been modified, skipping save\n" );

	int $submitEachRenderLayer = IsRenderLayersOn() ? `checkBox -q -value frw_submitEachRenderLayer` : false;
	int $regionRendering = `checkBox -q -value frw_regionRendering`;
	
	// If this is not a mental ray export job, check if we need to submit each layer as a separate job.
	if( !$mentalRayExport && IsRenderLayersOn() && $submitEachRenderLayer )
	{
		int $submitCounter = 0;
		
		// Store the currently selected render layer
		string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
		string $renderLayerList[] = `ls -exactType "renderLayer"`;
		
		// Loop through the render layer if the checkbox is on
		for( $i = 0; $i < size( $renderLayerList ); $i++ )
		{
			// Submit only if the renderable attribute is on
			$renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
			if( $renderable )
			{
				// Select the render layer to make sure the render settings are updated
				editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i];
				$renderer = currentRenderer();
				
				// Set up a tile rendering job if necessary.
				if( $regionRendering && SupportsRegionRendering( $renderer ) )
					$submitCounter += SetupRegionRenderingJob( $renderer );
				else
				{
					WriteJobFilesAndSubmit( $renderer, 0, 0, 0 );
					$submitCounter++;
				}
			}
		}
		
		// Reselect the current render layer
		editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;
		
		string $submitsResults = "Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.";
		confirmDialog -title "Submission Results" -message $submitsResults -button "Close";
	}
	else
	{
		// Only setup a tile rendering job if it is enabled and this is not a mental ray export job.
		if( !$mentalRayExport && $regionRendering && SupportsRegionRendering( $renderer ) )
		{
			int $submitCounter = SetupRegionRenderingJob( $renderer );
			confirmDialog -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
		}
		else
		{
			string $jobId = WriteJobFilesAndSubmit( $renderer, 1, 0, $mentalRayExport );
			print( "JOB ID = " + $jobId + "\n" );
		}
	}
}

// ===============================================================================================================
// The main function called by the Maya proxy script
// ===============================================================================================================

global proc SubmitJobToDeadline()
{   
	global string $MainTabLayout;
	global string $ImageOutputPathGrp;
	global string $ProjectPathGrp;
	global string $MentalRayFilenameGrp;
	global string $LimitGroupGrp;
	global string $DependenciesGrp;
	
	// This is a workaround for what seems like a bug in maya vector rendering. Without it, the
	// renderer would spit out "Error: No object matches name: defaultRenderGlobals.imageNamePrefix".
	AddStringAttribute( "imageNamePrefix" );
	
	// Get the renderer.
	string $renderer = GetCurrentRenderer();
	
	// Get the initial property values.
	string $jobName = `attributeExists deadlineJobName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobName` : StripPathAndExt(`file -q -sceneName`);	
	string $jobComment =  `attributeExists deadlineJobComment defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobComment` : "";
	string $department = `attributeExists deadlineDepartment defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDepartment` : "";
	string $savedGroup = `attributeExists deadlineGroup defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineGroup` : "none";

	string $savedJobPool = `attributeExists deadlineJobPool defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobPool` : "none";
	//int $useOnlyPool = `attributeExists deadlineUseOnlyPool defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineUseOnlyPool` : false;
	int $priority = `attributeExists deadlineJobPriority defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobPriority` : 50;
	int $limitCount = `attributeExists deadlineLimitCount defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineLimitCount` : 0;
	int $SlaveTimeout = `attributeExists deadlineSlaveTimeout defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSlaveTimeout` : 0;
	string $limitGroups = `attributeExists deadlineLimitGroups defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineLimitGroups` : "";
	string $dependencies = "";
	int $submitAsSuspended = `attributeExists deadlineSubmitAsSuspended defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitAsSuspended` : false;
	//int $deleteOnComplete = `attributeExists deadlineDeleteOnComplete defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDeleteOnComplete` : false;
	
	int $chunkSize = `attributeExists deadlineChunkSize defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineChunkSize` : 1;
	int $submitMayaScene = `attributeExists deadlineSubmitMayaScene defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitMayaScene` : true;
	int $cpus = `attributeExists deadlineNumCPUs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineNumCPUs` : 2;
	int $submitEachRenderLayer = `attributeExists deadlineSubmitEachRenderLayer defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitEachRenderLayer` : true;
	int $overrideGlobalRange = `attributeExists deadlineOverrideGlobalRange defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineOverrideGlobalRange` : false;
	int $useMayaBatchPlugin = `attributeExists deadlineUseMayaBatchPlugin defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin` : false;
	
	//string $savedOutputFilePath = `attributeExists deadlineOutputFilePath defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineOutputFilePath` : GetImageDirectory();
	//string $projectPath = `attributeExists deadlineProjectPathOverride defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineProjectPathOverride` : `workspace -q -fullName`;	
	string $savedOutputFilePath = GetImageDirectory();
	string $projectPath = `workspace -q -fullName`;
	
	int $overrideGlobalRangeEnable = false;
	int $tileRenderingEnable = true;
	int $regionRendering = false;
	int $tilesInX = `attributeExists deadlineTilesInX defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTilesInX` : 2;
	int $tilesInY = `attributeExists deadlineTilesInY defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTilesInY` : 2;
	
	string $mentalRayFilename = `attributeExists deadlineMentalRayFilename defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayFilename` : "";
	
	// Read in the pools.
	string $deadlinePools[];
	string $poolsQuery = SafeDeadlineCommand( "-pools" );
	tokenize $poolsQuery "\n" $deadlinePools;
	
	// Read in the groups.
	string $deadlineGroups[];
	string $groupQuery = SafeDeadlineCommand( "-groups" );
	tokenize $groupQuery "\n" $deadlineGroups;
	
	// Get the frame range.
	int $range[] = GetFrameRange();
	int $fromFrame = $range[0];
	int $toFrame = $range[1];
	int $byFrame = $range[2];
	
	string $frameRange = $fromFrame + "-" + $toFrame;
	if( $byFrame > 1 )
		$frameRange = $frameRange + "x" + $byFrame;
	
	int $renderHalfFrames = false;
	if( $byFrame == 0.5 )
		$renderHalfFrames = true;
	
	// Delete any previous windows.
	if( `window -exists DeadlineSubmitWindow` )
		deleteUI -window DeadlineSubmitWindow;
	
	// Create a new submission dialog window.
	string $window = `window DeadlineSubmitWindow`;
	if( `windowPref -exists DeadlineSubmitWindow` )
		windowPref -remove DeadlineSubmitWindow; // reset preference
	
	// Get the location of the main window.
	global string $gMainWindow;
	int $mainTopLeft[] = `window -q -tlc $gMainWindow`;
	
	// Add controls to the submission dialog.
	int $windowWidth = 500;
	int $windowHeight = 700;
	
	int $labelWidth = 110;
	int $controlWidth = 320;
	
	window -e -resizeToFitChildren true -sizeable false -title "Submit Job To Deadline" -widthHeight $windowWidth $windowHeight -tlc ($mainTopLeft[0] + 50) ($mainTopLeft[1] + 50) DeadlineSubmitWindow;
	formLayout -width $windowWidth -nd 100 mainFormLayout;
	
	scrollLayout -width $windowWidth -horizontalScrollBarThickness 0 mainScrollLayout;
		columnLayout -adjustableColumn true -columnAttach "both" 4;
			frameLayout -label " Job Description" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
				columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
					textFieldGrp -label "Job Name" -cl2 "left" "left" -cw2 $labelWidth 320 -text $jobName -changeCommand SavePersistentDeadlineOptions -annotation "The name of the job" frw_JobName;
					textFieldGrp -label "Comment" -cl2 "left" "left" -cw2 $labelWidth 320 -text $jobComment -changeCommand SavePersistentDeadlineOptions -annotation "A brief comment about the job" frw_JobComment;
					textFieldGrp -label "Department" -cl2 "left" "left" -cw2 $labelWidth 320 -text $department -changeCommand SavePersistentDeadlineOptions -annotation "The department the job (or the job's user) belongs to" frw_Department;
				setParent ..;
			setParent ..;
		
			frameLayout -label "Job Scheduling" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
				columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
					//rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
						string $poolsBox = `optionMenuGrp -label "Pool" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "The pool the job belongs to" frw_deadlinePool`;
						int $i; for( $i = 0; $i < size($deadlinePools); ++$i )
						{ 
							menuItem -label $deadlinePools[$i];
							if( $deadlinePools[$i] == $savedJobPool )
								optionMenuGrp -e -select ($i+1) $poolsBox;
						}
					
						//checkBox -label "Use Machines In Pool Only" -v $useOnlyPool -changeCommand SavePersistentDeadlineOptions -annotation "Only render using machines in the currently selected pool" frw_poolMachinesOnly;
					//setParent ..;
						
					string $groupsBox = `optionMenuGrp -label "Group" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "The group the job belongs to" frw_Group`;
					int $i; for( $i = 0; $i < size( $deadlineGroups ); ++$i )
					{ 
						menuItem -label $deadlineGroups[$i];
						if( $deadlineGroups[$i] == $savedGroup )
							optionMenuGrp -e -select ($i+1) $groupsBox;
					}
					
					intSliderGrp -label "Priority" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 100 -v $priority -changeCommand SavePersistentDeadlineOptions -annotation "The job's priority (0 is the lowest, 100 is the highest)" frw_JobPriority;
					intSliderGrp -label "Machine Limit" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 1000 -v $limitCount -changeCommand SavePersistentDeadlineOptions -annotation "Limit the number of machines that can render this job concurrently (specify 0 for no machine limit)" frw_LimitCount;
					intSliderGrp -label "Task Timeout" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 5000 -v $SlaveTimeout -changeCommand SavePersistentDeadlineOptions -annotation "The number of minutes a slave has to render an individual task before timing out (specify 0 for no limit)" frw_SlaveTimeout;
					
					$LimitGroupGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Limit Groups" -buttonLabel "..." -fileName $limitGroups -changeCommand SavePersistentDeadlineOptions -annotation "The limit groups that this job requires." frw_limitGroups`;
					textFieldButtonGrp -e -bc SetLimitGroups $LimitGroupGrp;
						
					$DependenciesGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Dependencies" -buttonLabel "..." -fileName $dependencies -changeCommand SavePersistentDeadlineOptions -annotation "The jobs that this job is dependent on." frw_dependencies`;
					textFieldButtonGrp -e -bc SetDependencies $DependenciesGrp;
													
					//rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "right" "left";
					//	checkBox -label "Submit As Suspended         " -v $submitAsSuspended -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this job will be submitted in the suspended state" frw_submitAsSuspended;
					//	checkBox -label "Delete When Complete" -v $deleteOnComplete -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this job will delete itself when it finishes" frw_deleteOnComplete;
					//setParent ..;
					
					rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
						string $onCompleteBox = `optionMenuGrp -label "On Complete" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "What to do with the job after it completes." frw_onComplete`;
						menuItem -label "Nothing";
						menuItem -label "Archive";
						menuItem -label "Delete";
						optionMenuGrp -e -select (1) $onCompleteBox;
						
						checkBox -label "Submit As Suspended" -v $submitAsSuspended -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this job will be submitted in the suspended state" frw_submitAsSuspended;
					setParent ..;
				setParent ..;
			setParent ..;
			
			frameLayout -label "Render Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
				columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
					textFieldGrp -label "Frame List" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "Enter a list of frames to render, seperated by commas for seperate frames, or dashes for continuous sequences of frames. e.g. 1, 5-10, 100" -text $frameRange frw_FrameList;
					intSliderGrp -label "Task Size" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 1000 -v $chunkSize -changeCommand SavePersistentDeadlineOptions -annotation "Each task for the job will consist of this many frames" frw_FrameGroup;
					
					rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
						string $camerasBox = `optionMenuGrp -label "Camera" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "Leave blank to render using the default camera settings." frw_camera`;
						string $cameraList[] = `ls -cameras`;
						menuItem -label " ";
						int $i; for( $i = 0; $i < size($cameraList); ++$i )
							menuItem -label $cameraList[$i];
						optionMenuGrp -e -select (1) $camerasBox;
					setParent ..;
						
					$ImageOutputPathGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Output Path" -buttonLabel "..." -fileName $savedOutputFilePath -changeCommand SavePersistentDeadlineOptions -annotation "The path to which the output files will be sent. Must be network accessible." frw_outputFilePath`;
					textFieldButtonGrp -e -bc SetImageDir $ImageOutputPathGrp;
					
					$mayaBuildEnabled = (IntMayaVersion() > 7);
					rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
						string $mayaBuildBox = `optionMenuGrp -en $mayaBuildEnabled -label "Maya Build" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "Force Deadline to render using the specified build of Maya" frw_mayaBuild`;
						menuItem -label "None";
						menuItem -label "32bit";
						menuItem -label "64bit";
						if( $mayaBuildEnabled )
						{
							if( `about -is64` )
								optionMenuGrp -e -select (3) $mayaBuildBox;
							else
								optionMenuGrp -e -select (2) $mayaBuildBox;
						}
						else
							optionMenuGrp -e -select (1) $mayaBuildBox;
						
						string $submitMayaSceneBox = `checkBox -label "Submit Maya Scene File" -v $submitMayaScene -changeCommand SavePersistentDeadlineOptions -annotation "If unchecked, the Maya scene file should be network accessable" frw_submitMayaScene`;
					setParent ..;
				setParent ..;
			setParent ..;
			
			$MainTabLayout = `tabLayout frw_mainTabLayout`;
				columnLayout -adj true -columnAttach "both" 4 mayaTabLayout;
					frameLayout -label "Maya Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							
							$ProjectPathGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Project Path" -buttonLabel "..." -fileName $projectPath -changeCommand SavePersistentDeadlineOptions -annotation "Use this Maya project path to load the Maya scene" frw_projectPath`;
							textFieldButtonGrp -e -bc SetProjectDir $ProjectPathGrp;
						
							$cpuEnabled = EnableCpuOption( $renderer );
							intSliderGrp -en $cpuEnabled -label "CPUs To Use" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 16 -v $cpus -changeCommand SavePersistentDeadlineOptions -annotation  "The number of processors to use during rendering (specify 0 to use all processors available)" frw_MaxCPUs;
							
							$renderLayerEnabled = IsRenderLayersOn();
							if( $renderLayerEnabled )
							{
								$tileRenderingEnable = $submitEachRenderLayer; // use to submit as seperate job value for the tile rendering enable
								$overrideGlobalRangeEnable = $submitEachRenderLayer;
								if( !$submitEachRenderLayer )
									$regionRendering = false;
							}
							
							rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
								string $submitEachRenderLayerBox = `checkBox -en $renderLayerEnabled -label "Submit Render Layers As Seperate Jobs" -v $submitEachRenderLayer -changeCommand SavePersistentDeadlineOptions -annotation "Check this to submit each renderable Render Layer as a seperate Deadline job. Note that the frame range will be pulled from the render globals for each layer." frw_submitEachRenderLayer`;
								checkBox -enable $overrideGlobalRangeEnable -label "Override Global Frame Range" -v $overrideGlobalRange -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this frame range will override the frame range in the Globals when submitting a separate job for each later" frw_overrideGlobalRange;
							setParent ..;
							
							rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
								checkBox -label "Use MayaBatch Plugin" -v $useMayaBatchPlugin -changeCommand SavePersistentDeadlineOptions -annotation "The MayaBatch plugin is a new Maya plugin which keeps the scene loaded between frames" frw_useMayaBatchPlugin;
							
								$halfFramesEnabled = ShowHalfFramesOption( $renderer );
								checkBox -en $halfFramesEnabled -label "Render Half Frames" -v $renderHalfFrames -changeCommand SavePersistentDeadlineOptions -annotation "If checked, frames will be split into two using a step of 0.5" frw_renderHalfFrames;
							setParent ..;
						setParent ..;
					setParent ..;
					
					frameLayout -label "Tile Rendering" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -collapse true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
								text -label "Supported for mayaSoftware, mentalRay, renderMan, finalRender, and turtle jobs only.\nIf you have multiple layers, this only works if you submit each layer as a seperate job." frw_tileLabel;
							setParent ..;
							
							rowLayout -numberOfColumns 2 -cw2 $labelWidth 320 -ct2 "left" "right";
								checkBox -enable $tileRenderingEnable -label "Enable" -changeCommand SavePersistentDeadlineOptions -v $regionRendering -annotation "Tile rendering splits up a frame between multiple machines (the assembly is done automatically for bmp, exr, jpg, png, tga, and tif)" frw_regionRendering;
								intSliderGrp -enable $regionRendering -label "Tiles In X" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 200 -v $tilesInX -changeCommand SavePersistentDeadlineOptions -annotation "The number of tiles in the X direction" frw_tilesInX;
							setParent ..;
							
							rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
								intSliderGrp -enable $regionRendering -label "Tiles In Y" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 200 -v $tilesInY -changeCommand SavePersistentDeadlineOptions -annotation "The number of tiles in the Y direction" frw_tilesInY;
							setParent ..;
						setParent ..;
					setParent ..;
				setParent ..;
				
				columnLayout -adj true -columnAttach "both" 4 mentalRayExportTabLayout;
					frameLayout -label "Mental Ray Export" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
						columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
							rowLayout -numberOfColumns 2 -cw2 $labelWidth 320 -ct2 "left" "right";
								$MentalRayFilenameGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Output File" -buttonLabel "..." -fileName $mentalRayFilename -changeCommand SavePersistentDeadlineOptions -annotation "The full filename of the Mental Ray files that will be exported (padding is handled automatically by the exporter)" frw_mentalRayFilePath`;
								textFieldButtonGrp -e -bc SetMentalRayFilename $MentalRayFilenameGrp;
							setParent ..;
							
							rowLayout -numberOfColumns 2 -cw2 110 290 -ct2 "left" "left";
								button -label "Export Settings..." -width 100 -c OpenExportSettings -height 26 -annotation "Opens the Export Settings dialog";
								text -label "(This dialog must be open when submitting the job)";
							setParent ..;
						setParent ..;
					setParent ..;
				setParent ..;
			setParent ..;
			
			tabLayout -e -tabLabel mayaTabLayout "Submit Maya Render Job" $MainTabLayout;
			tabLayout -e -tabLabel mentalRayExportTabLayout "Submit Mental Ray Export Job" $MainTabLayout;
		setParent ..;
	setParent ..;
	
	columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4 buttonColumnLayout;
		rowLayout -numberOfColumns 4 -cw4 120 120 120 120;
			string $B3 = `button -label "Render Globals..." -width 110 -height 26 -c unifiedRenderGlobalsWindow -annotation "Opens the Maya Render Globals Dialog" frw_GlobalsButton`;
			button -label "Edit Project..." -width 110 -height 26 -c EditProject -annotation "Opens the Maya Edit Project Dialog";
			button -label "Online Help..." -width 110 -c OnlineHelp -height 26 -annotation "Opens the Online Help page in the Default Web Browser";
			button -label "Submit Job" -width 110 -height 26 -annotation "Submits this job to Deadline" -c DeadlineSubmitterOnOk;
		setParent ..;
	setParent ..;
	
	formLayout -e
		-af buttonColumnLayout bottom 5
		-af buttonColumnLayout left 5
		-ac mainScrollLayout bottom 5 buttonColumnLayout
		-af mainScrollLayout top 5
		-af mainScrollLayout left 5
	mainFormLayout;
	
	// Show the submission dialog window.
	showWindow DeadlineSubmitWindow;
}
SubmitJobToDeadline();

